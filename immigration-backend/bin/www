#!/usr/bin/env node

/**
 * Module dependencies.
 */
var chatModel = require('../models/messageModel.js');
var app = require('../index');
var debug = require('debug')('mybackend:server');
var http = require('https');
var fs = require('fs');

var privateKey = fs.readFileSync('sslcert/www.hindujatech.com.key');
var certificate = fs.readFileSync('sslcert/cert.pem');
var credentials = { key: privateKey, cert: certificate };
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3695');
process.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';
app.set('port', port);

/**
 * Create HTTP server.
 */
//  var http = require('http').createServer(app);
var server = http.createServer(credentials, app);

server.listen(3695);


var io = require('socket.io')(server);

const users = {}
io.on('connection', (socket) => {
    console.log("socketid", socket.id)
    reqObj = {}
    console.log('a user connected');
    socket.on('message', async(msg) => {
        console.log("wefwefwe", msg);
        if (msg.message) {
            var findResult = await chatModel.find({ "emp_id": msg.emp_id })
            if (findResult.length != 0) {
                // users[socket.id] = msg.emp_id
                // console.log("weew", users)
                console.log("dsfdsfdsfsdfsdfs")
                result = await chatModel.updateOne({ "emp_id": msg.emp_id }, { "$push": { "chat": { "message": msg.message, "chat_on": msg.chat_on } } })
                console.log("result", result)
                    // var empDetails = msg.emp_id
                    // socket.join(empDetails);
                console.log("asasas", msg)
                socket.broadcast.emit('message-broadcast', msg)
                    // socket.broadcast.emit(empDetails).emit('message-broadcast', msg)
                    // socket.broadcast.emit('message-broadcast', msg)
            } else {
                console.log("insideempty")
                reqObj.emp_id = msg.emp_id;
                reqObj.chat = {
                    message: msg.message,
                    chat_on: msg.chat_on,
                    emp_number: msg.emp_number
                }
                req = new chatModel(reqObj);
                req.save().then(() => {
                    socket.emit('message-broadcast', msg)
                })
            }
        } else {
            try {
                let result = ''
                result = await chatModel.find({ "emp_id": msg.emp_id })
                socket.emit('message-output', result)
            } catch (error) {
                throw new error
            }
        }
    });

    // socket.on('message', async(msg, room) => {
    //     console.log("wefwefwe", msg, room);
    //     if (msg.message) {
    //         var findResult = await chatModel.find({ "emp_id": msg.emp_id })
    //         if (findResult.length != 0) {
    //             console.log("dsfdsfdsfsdfsdfs")
    //             result = await chatModel.updateOne({ "emp_id": msg.emp_id }, { "$push": { "chat": { "message": msg.message, "chat_on": msg.chat_on } } })
    //             console.log("result", result)
    //                 // socket.broadcast.emit('message-broadcast', msg.message)
    //             socket.to(room).emit('message-broadcast', msg.message)
    //                 // socket.broadcast.emit('message-broadcast', msg.message)
    //         } else {
    //             console.log("insideempty")
    //             reqObj.emp_id = msg.emp_id;
    //             reqObj.chat = {
    //                 message: msg.message,
    //                 chat_on: msg.chat_on
    //             }
    //             req = new chatModel(reqObj);
    //             req.save().then(() => {
    //                 socket.emit('message-broadcast', msg.message)
    //             })
    //         }
    //     } else {
    //         try {
    //             let result = ''
    //             result = await chatModel.find({ "emp_id": msg.emp_id })
    //             socket.emit('message-output', result)
    //         } catch (error) {
    //             throw new error
    //         }
    //         // chatModel.find().then((result) => {
    //         //     socket.emit('message-output', result)
    //         // })
    //         // console.log("socket", socket)
    //     }

    //     // socket.broadcast.emit('message-broadcast', msg.message);
    // });
});
/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port, () => {
//     console.log("connection port" + port + " ")
// });
// server.on('error', onError);
// server.on('listening', onListening);


//Why me??






/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    console.log(server.address().address);

    var addr = server.address();

    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}